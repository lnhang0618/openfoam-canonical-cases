/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.2.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//New fast merging in of 3.0.1
fastMerge yes;

scale 1;

vertices
(
    (0 0 0)
    (12.5663 0 0)
    (0 0.0621 0)
    (12.5663 0.0621 0)
    (0 1.9379 0)
    (12.5663 1.9379 0)
    (0 0 3.14159)
    (12.5663 0 3.14159)
    (0 0.0621 3.14159)
    (12.5663 0.0621 3.14159)
    (0 1.9379 3.14159)
    (12.5663 1.9379 3.14159)
    (0 2 0)
    (12.5663 2 0)
    (0 2 3.14159)
    (12.5663 2 3.14159)
    (0 1 0)
    (12.5663 1 0)
    (0 1 3.14159)
    (12.5663 1 3.14159)
);


blocks
(
    hex (0 1 3 2 6 7 9 8) (42 2 40) simpleGrading (1 2 1)
    hex (2 3 17 16 8 9 19 18) (42 13 40) simpleGrading (1 1.1 1)
    hex (16 17 5 4 18 19 11 10) (42 13 40) simpleGrading (1 -1.1 1)
    hex (4 5 13 12 10 11 15 14) (42 2 40) simpleGrading (1 -2 1)
);

edges
(
);

boundary
(
    inlet
    {
        type            cyclic;
        neighbourPatch  outlet;
        faces           ((0 6 8 2) (2 8 18 16) (16 18 10 4) (4 10 14 12));
    }

    outlet
    {
        type            cyclic;
        neighbourPatch  inlet;
        faces           ((1 3 9 7) (3 17 19 9) (17 5 11 19) (5 13 15 11));
    }

    bottomWall
    {
        type            wall;
        faces           ((0 1 7 6));
    }
    topWall
    {
        type            wall;
        faces           ((12 14 15 13));
    }

    left
    {
        type            cyclic;
        neighbourPatch  right;
        faces           ((0 2 3 1) (2 16 17 3) (16 4 5 17) (4 12 13 5));
    }

    right
    {
        type            cyclic;
        neighbourPatch  left;
        faces           ((6 7 9 8) (8 9 19 18) (18 19 11 10) (10 11 15 14));
    }

    
);

mergePatchPairs
(
);

// ************************************************************************* //
