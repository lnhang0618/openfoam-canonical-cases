// -*- C++ -*-
// File generated by PyFoam - sorry for the ugliness

FoamFile
{
 version 2.0;
 format ascii;
 class dictionary;
 location "system";
 object controlDict;
}

startFrom       startTime;
startTime       0;
stopAt          endTime;
endTime         10000;
deltaT          1;
writeControl    timeStep;
writeInterval   10000;
purgeWrite      0;
writeFormat     ascii;
writePrecision  16;
writeCompression off;
timeFormat      general;
timePrecision   16;
runTimeModifiable true;

functions{
  wallShearStress1
  {
      type            wallShearStress;
      libs            ("libfieldFunctionObjects.so");
      writeControl    timeStep;
      writeInterval   10000;
      patches         (bottomWall topWall);
  }
}

// DebugSwitches
// {
//     ODEWallModelFvPatchScalarField 2; // 同时启用 ODE 的调试
// }

// functions
// {

  // pGrad
  // {
  //     type            grad;
  //     libs            ("fieldFunctionObjects");
  //     field           p;
  //     result          pGrad;
  //     executeControl  writeTime;  // 修改为writeTime
  //     writeControl    writeTime;  // 修改为writeTime
  // }
//   uTau
//   {
//     type patchExpression;
//     patches
//       (
//         bottomWall
//         topWall
//       );
//     outputControlMode timeStep;
//     outputInterval 1;
//     expression "sqrt((nu+nut)*mag(snGrad(U)))";
//     verbose yes;
//     writeStartTime no;
//     accumulations
//       (
//         average
//       );
//   }
// }
//   yPlus
//   {
//     type patchExpression;
//     patches
//       (
//         bottomWall
//         topWall
//       );
//     outputControlMode timeStep;
//     outputInterval 1;
//     expression "dist()/nu*sqrt((nu+nut)*mag(snGrad(U)))";
//     verbose yes;
//     writeStartTime no;
//     accumulations
//       (
//         average
//       );
//   }

//   ReTau
//   {
//     type patchExpression;
//     patches
//       (
//         bottomWall
//         topWall
//       );
//     outputControlMode timeStep;
//     outputInterval 1;
//     expression "sqrt((nu+nut)*mag(snGrad(U)))/nu";
//     verbose yes;
//     writeStartTime no;
//     accumulations
//       (
//         average
//       );
//   }
//   // uTau_wallshear
//   // {
//   //     type patchExpression;
//   //     patches
//   //     (
//   //         bottomWall
//   //         topWall
//   //     );
//   //     outputControlMode timeStep;
//   //     outputInterval 1;
//   //     expression "sqrt(wallShearStress&vector(1,0,0))";
//   //     verbose yes;
//   //     writeStartTime no;
//   //     accumulations
//   //     (
//   //         average
//   //     );
//   // }
//   // ReTau_wallshear
//   // {
//   //     type patchExpression;
//   //     patches
//   //     (
//   //         bottomWall
//   //         topWall
//   //     );
//   //     outputControlMode timeStep;
//   //     outputInterval 1;
//   //     expression "sqrt(wallShearStress&vector(1,0,0))/nu";
//   //     verbose yes;
//   //     writeStartTime no;
//   //     accumulations
//   //     (
//   //         average
//   //     );
//   //}
//   // pressureGradient
//   // {
//   //     type            coded;
//   //     functionObjectLibs ("libutilityFunctionObjects.so");
//   //     outputControl   timeStep;
//   //     outputInterval  1;
//   //     patches
//   //     (
//   //         bottomWall
//   //         topWall
//   //     );
//   //     code
//   //     #{
//   //         const volScalarField& p = mesh().lookupObject<volScalarField>("p");
//   //         volVectorField gradP = fvc::grad(p);
//   //         const vector gradPx = gradP.component(vector::X);
//   //          forAll(patchIDs, i)
//   //         {
//   //             const label patchi = patchIDs[i];
//   //             const fvPatch& patch = mesh().boundary()[patchi];
//   //             const fvPatchField<scalar>& pPatch = p.boundaryField()[patchi];
//   //             const fvPatchField<vector>& gradPPatch = gradP.boundaryField()[patchi];
//   //             scalarField gradPxPatch(pPatch.size());
//   //             forAll(pPatch, j)
//   //             {
//   //             gradPxPatch[j] = gradPPatch[j].x();
//   //             }

//   //             IOdictionary gradPxDict
//   //               (
//   //                 IOobject
//   //                   (
//   //                       "gradPx_" + patch.name(),
//   //                       runTime.timeName(),
//   //                       mesh(),
//   //                       IOobject::NO_READ,
//   //                       IOobject::AUTO_WRITE
//   //                   )
//   //               );
//   //               gradPxDict.add("gradPx", gradPxPatch);
//   //               gradPxDict.write();
//   //           }
//   //       #};
//   //   }

  
//   fieldAverage
//   {
//     type fieldAverage;
//     libs
//       (
//         "libfieldFunctionObjects.so"
//       );
//     enabled yes;
//     writeControl outputTime;
//     restartTime 50;//在300s时开始重新计算平均值，之后所有时间的平均值指的都是300s起的平均值；但是300s之前也有平均值输出，这个平均值是从0s开始的
//     fields
//       (
//         U

//         {
//           mean yes;
//           prime2Mean yes;
//           base time;

//         }
//         nut
//         {
//           mean yes;
//           prime2Mean no;
//           base time;

//         }
//         wallShearStress 
//         {
//           mean yes;
//           prime2Mean yes;
//           base time;
//         }
//         pGrad
//         {
//           mean yes;
//           prime2Mean yes;
//           base time;
//         }
//       );
//   }

// }

libs
  (
    "libOpenFOAM.so"
    "libfieldFunctionObjects.so"  // 新增：支持压力梯度计算
  );    // ************************************************************************* //

